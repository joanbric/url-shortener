---
import CloseIcon from '@/components/icons/CloseIcon.astro';
import Layout from '../layouts/Layout.astro';
import Copier from '@components/Copier.astro';
import { menuItems } from '@libs/collections';

const BASE_URL = import.meta.env.VERCEL_URL;

---

<Layout>
	<main class="min-h-dvh w-full max-w-5xl p-5 mx-auto">
		<h1 class="text-3xl md:text-6xl my-15 font-sans font-bold text-center">
			URL Shortener
		</h1>

		<section class="mb-10">
			<ul
				class="flex md:flex-row flex-col gap-2 md:gap-1 items-center select-none"
			>
				{
					menuItems.map((item) => (
						<li class="group flex">
							<input
								class="hidden peer"
								type="checkbox"
								name="customCode"
								id={item.id}
							/>
							<label
								class="text-sm rounded-lg md:group-not-first:rounded-l-none md:group-not-last:rounded-r-none border-2 text-blue-800 border-blue-600 px-4 py-1 font-bold transition-colors peer-checked:bg-blue-600 bg-white peer-checked:text-white text-nowrap"
								for={item.id}
							>
								{item.label}
							</label>
						</li>
					))
				}
			</ul>
		</section>

		<form class="text flex flex-col gap-3 w-full">
			<!-- urls -->
			<input
				type="text"
				name="url"
				class="border border-gray-300 rounded px-4 py-2 w-full"
				placeholder="Enter URL"
			/>
			<!-- Custom Hash -->
			<div class="flex flex-col w-full md:flex-row gap-4">
				<div class="custom-hash-container flex-1/2 hidden">
					<input
						type="text"
						name="customHash"
						class="border border-gray-300 rounded px-4 py-2 w-full"
						placeholder="Custom Hash (optional)"
					/>
				</div>
				<!-- Auth Code (password) -->
				<div class="auth-code-container flex-1/2 hidden">
					<input
						type="text"
						name="authCode"
						class="border border-gray-300 rounded px-4 py-2 w-full"
						placeholder="Authentication Code (optional)"
					/>
				</div>
			</div>

			<button
				class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors active:bg-blue-700"
				type="submit"
				>Shorten</button
			>
		</form>

		<!-- Status messages -->
		<section
			id="status-container"
			class="hidden mt-5 mb-10 p-4 rounded border-3 relative"
		>
			<button
				class="absolute top-3 right-3"
				aria-label="Close status alert"
				onclick="this.parentElement.classList.add('hidden')"
			>
				<CloseIcon class="w-5 h-5" /></button
			>
			<h3
				id="statusText"
				class="text-sm font-semibold"
			>
				Warning
			</h3>
			<p
				id="statusMessage"
				class="text-sm mt-2"
			>
				Please introduce a valid URL to shorten it. The URL must start with
				"http://" or "https://". If you want to use a custom hash, please enter
				it in the field above. If you want to use an authentication code, please
				enter it in the field above.
			</p>
		</section>

		<!-- URL Shortening Result -->
		<section
			class="text-xl invisible text-gray-300 text-center w-full transition-opacity duration-300"
			id="result"
		>
			<p>
				Your new shortened URL:
				<div
					class="border-2 border-gray-600 rounded p-3 w-full relative flex items-center justify-center gap-4"
				>
					<a
						id="shortened-url"
						class="text-blue-200 overflow-ellipsis overflow-hidden font-bold underline hover:cursor-pointer hover:text-blue-300"
						target="_blank"
						href={BASE_URL}
						>{BASE_URL}/</a
					>
					<Copier
						id="copier"
						class=""
						url={BASE_URL}
					/>
				</div>
			</p>
		</section>

		<section>
			<p class="text-sm text-gray-400">
				This is a simple URL shortener built with Astro and Turso. Enter a URL
				above to shorten it.
			</p>
			<p class="text-sm text-gray-400 mt-2">
				Note: The shortened URL will not be saved permanently in this demo.
			</p>
		</section>

		<section class="last-links-container pb-10 w-full overflow-hidden hidden">
			<h2 class="text-xl text-center my-5 font-bold">Last Shortened URLs</h2>
			<table class="max-w-5xl text-sm border-collapse">
				<thead>
					<tr class="">
						<th class="bg-sky-200 text-slate-700 w-[10%]">ID</th>
						<th class="bg-sky-200 text-slate-700 w-[70%]">URL</th>
						<th class="bg-sky-200 text-slate-700 w-[20%] hidden md:table-cell"
							>Created At</th
						>
					</tr>
				</thead>
				<tbody id="last-shortened-urls">
					<tr>
						<td>id</td>
						<td>url</td>
						<td>createdAt</td>
					</tr>
				</tbody>
			</table>
		</section>
	</main>
</Layout>

<style is:inline>
	table,
	td,
	th,
	tr {
		border-collapse: collapse;
		--max-table-width: 64rem;
	}
	tr {
		border-bottom: 2px solid #e2e8f052;
		margin-block: 0.5rem;
		& td {
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			padding: 0.5rem;
			& a:hover {
				text-decoration: underline;
			}
			&:first-child {
				max-width: calc(var(--max-table-width) * 0.1);
			}
			&:nth-child(2),
			&:nth-child(2) > * {
				max-width: calc(var(--max-table-width) * 0.7);
			}
			&:nth-child(3) {
				max-width: calc(var(--max-table-width) * 0.2);
			}
		}
	}
</style>

<script>
	import { menuItems } from '@libs/collections';
	import { showStatusMessage } from '@libs/errorHandler';

	if (!menuItems || !Array.isArray(menuItems)) {
		throw new Error('Menu items are not defined or not an array');
	}
	const $useCustomHash = document.getElementById(
		menuItems[0].id
	) as HTMLInputElement;
	const $useAuthCode = document.getElementById(
		menuItems[1].id
	) as HTMLInputElement;
	const $showLinks = document.getElementById(
		menuItems[2].id
	) as HTMLInputElement;

	if (!$useCustomHash || !$useAuthCode || !$showLinks) {
		throw new Error('Menu items not found in the DOM');
	}

	const $customHashContainer = document.querySelector('.custom-hash-container');
	if (!$customHashContainer) {
		throw new Error('Custom hash container not found');
	}

	$useCustomHash.addEventListener('change', (e) => {
		if ($useCustomHash.checked) {
			$customHashContainer.classList.remove('hidden');
		} else {
			$customHashContainer.classList.add('hidden');
		}
	});

	const $authCodeContainer = document.querySelector('.auth-code-container');
	if (!$authCodeContainer) {
		throw new Error('Authentication code container not found');
	}
	$useAuthCode.addEventListener('change', (e) => {
		if ($useAuthCode.checked) {
			$authCodeContainer.classList.remove('hidden');
		} else {
			$authCodeContainer.classList.add('hidden');
		}
	});

	const $lastShortenedUrls = document.getElementById('last-shortened-urls');
	const $lastShortenedUrlsContainer = document.querySelector(
		'section.last-links-container'
	);
	if (!$lastShortenedUrls || !$lastShortenedUrlsContainer) {
		throw new Error('Last shortened URLs section not found');
	}

	let areLastShortenedUrlsLoaded = false;

	$showLinks.addEventListener('change', async (e) => {
		if ($showLinks.checked) {
			$lastShortenedUrlsContainer.classList.remove('hidden');
			if (areLastShortenedUrlsLoaded) return;
			try {
				const res = await fetch('/api/links');
				if (!res.ok)
					throw new Error(
						`Error fetching last shortened URLs: ${await res.json()}`
					);

				const data = await res.json();
				if (!Array.isArray(data)) throw new Error('Invalid response format');

				if (data.length === 0) {
					$lastShortenedUrlsContainer.classList.add('hidden');
					return;
				}

				$lastShortenedUrls.innerHTML = data
					.map(
						(url) => `<tr>
          <td><a href="/${url.id}">${url.id}</a></td>
          <td><a href="${url.url}">${url.url}</a></td>
          <td class="hidden md:table-cell">${new Date(url.createdAt).toLocaleString()}</td>
          </tr>`
					)
					.join('');
				areLastShortenedUrlsLoaded = true;
			} catch (err) {
				const error =
					err instanceof Error
						? JSON.parse(err.message)
						: { code: 500, message: 'Unknown error' };
				showStatusMessage(
					500,
					error instanceof Error ? error.message : 'Unknown error',
					'error'
				);
			}
		} else {
			$lastShortenedUrlsContainer.classList.add('hidden');
		}
	});
</script>

<script>
	import { showStatusMessage } from '@libs/errorHandler';

	const form = document.querySelector('form');
	if (!form) throw new Error('Form not found');

	form.addEventListener('submit', async (e) => {
		e.preventDefault();
		const url = form.url.value;
		const customHash = form.customHash.value;
		const authCode = form.authCode.value;

		try {
			const res = await fetch(`/api/shortener`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({ url, customHash, authCode })
			});
			if (!res.ok) {
				throw new Error(
					JSON.stringify({
						code: res.status,
						message: `Error shortening URL: ${await res.json()}`
					})
				);
			}
			const data = await res.json();
			if (!data.shortenedUrl)
				throw new Error('Shortened URL not found in response');

			const shortenedUrl = document.getElementById(
				'shortened-url'
			) as HTMLAnchorElement;
			if (!shortenedUrl) throw new Error('Shortened URL element not found');

			const resultSection = document.getElementById('result');
			if (!resultSection) throw new Error('Result section not found');

			shortenedUrl.textContent = data.shortenedUrl;
			shortenedUrl.href = data.shortenedUrl;
			resultSection.classList.remove('invisible');

			const btnCopier = document.getElementById('copier') as HTMLButtonElement;
			if (!btnCopier) throw new Error('Copy button not found');
			btnCopier.dataset.url = data.shortenedUrl;

		} catch (err) {
			const error =
				err instanceof Error
					? JSON.parse(err.message)
					: { code: 500, message: 'Unknown error' };

			showStatusMessage(error.code, error.message, 'error');
		}
	});
</script>
